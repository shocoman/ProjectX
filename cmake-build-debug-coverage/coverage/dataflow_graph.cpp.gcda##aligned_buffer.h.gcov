        -:    0:Source:D:/programming/mingwW64/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/ext/aligned_buffer.h
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Aligned memory buffer -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2013-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/aligned_buffer.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _ALIGNED_BUFFER_H
        -:   30:#define _ALIGNED_BUFFER_H 1
        -:   31:
        -:   32:#pragma GCC system_header
        -:   33:
        -:   34:#if __cplusplus >= 201103L
        -:   35:# include <type_traits>
        -:   36:#else
        -:   37:# include <bits/c++0x_warning.h>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx
        -:   41:{
        -:   42:  // A utility type containing a POD object that can hold an object of type
        -:   43:  // _Tp initialized via placement new or allocator_traits::construct.
        -:   44:  // Intended for use as a data member subobject, use __aligned_buffer for
        -:   45:  // complete objects.
        -:   46:  template<typename _Tp>
        -:   47:    struct __aligned_membuf
        -:   48:    {
        -:   49:      // Target macro ADJUST_FIELD_ALIGN can produce different alignment for
        -:   50:      // types when used as class members. __aligned_membuf is intended
        -:   51:      // for use as a class member, so align the buffer as for a class member.
        -:   52:      struct _Tp2 { _Tp _M_t; };
        -:   53:
        -:   54:      alignas(__alignof__(_Tp2::_M_t)) unsigned char _M_storage[sizeof(_Tp)];
        -:   55:
        -:   56:      __aligned_membuf() = default;
        -:   57:
        -:   58:      // Can be used to avoid value-initialization zeroing _M_storage.
        -:   59:      __aligned_membuf(std::nullptr_t) { }
        -:   60:
        -:   61:      void*
    1348*:   62:      _M_addr() noexcept
    1348*:   63:      { return static_cast<void*>(&_M_storage); }
------------------
_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv:
       72:   62:      _M_addr() noexcept
       72:   63:      { return static_cast<void*>(&_M_storage); }
       72:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufIP10BasicBlockE7_M_addrEv:
       88:   62:      _M_addr() noexcept
       88:   63:      { return static_cast<void*>(&_M_storage); }
       88:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIiSaIiEEEE7_M_addrEv:
      357:   62:      _M_addr() noexcept
      357:   63:      { return static_cast<void*>(&_M_storage); }
      357:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt3setIP10BasicBlockSt4lessISB_ESaISB_EEEE7_M_addrEv:
       73:   62:      _M_addr() noexcept
       73:   63:      { return static_cast<void*>(&_M_storage); }
       73:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiSt3setIiSt4lessIiESaIiEEEE7_M_addrEv:
      302:   62:      _M_addr() noexcept
      302:   63:      { return static_cast<void*>(&_M_storage); }
      302:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiiEE7_M_addrEv:
      247:   62:      _M_addr() noexcept
      247:   63:      { return static_cast<void*>(&_M_storage); }
      247:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiP10BasicBlockEE7_M_addrEv:
      180:   62:      _M_addr() noexcept
      180:   63:      { return static_cast<void*>(&_M_storage); }
      180:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiZ13live_analysesRSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteIS5_EESaIS8_EEE14BlockLiveStateEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7_M_addrEv:
       29:   62:      _M_addr() noexcept
       29:   63:      { return static_cast<void*>(&_M_storage); }
       29:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZ17liveness_analysesRKSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteISB_EESaISE_EEE13LivenessStateEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx114listIiSaIiEEEEE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufIiE7_M_addrEv:
    #####:   62:      _M_addr() noexcept
    #####:   63:      { return static_cast<void*>(&_M_storage); }
    %%%%%:   63-block  0
------------------
        -:   64:
        -:   65:      const void*
    2415*:   66:      _M_addr() const noexcept
    2415*:   67:      { return static_cast<const void*>(&_M_storage); }
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIiSaIiEEEE7_M_addrEv:
      707:   66:      _M_addr() const noexcept
      707:   67:      { return static_cast<const void*>(&_M_storage); }
      707:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt3setIP10BasicBlockSt4lessISB_ESaISB_EEEE7_M_addrEv:
      111:   66:      _M_addr() const noexcept
      111:   67:      { return static_cast<const void*>(&_M_storage); }
      111:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiiEE7_M_addrEv:
      153:   66:      _M_addr() const noexcept
      153:   67:      { return static_cast<const void*>(&_M_storage); }
      153:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiP10BasicBlockEE7_M_addrEv:
      288:   66:      _M_addr() const noexcept
      288:   67:      { return static_cast<const void*>(&_M_storage); }
      288:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiSt3setIiSt4lessIiESaIiEEEE7_M_addrEv:
      631:   66:      _M_addr() const noexcept
      631:   67:      { return static_cast<const void*>(&_M_storage); }
      631:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiZ13live_analysesRSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteIS5_EESaIS8_EEE14BlockLiveStateEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7_M_addrEv:
      187:   66:      _M_addr() const noexcept
      187:   67:      { return static_cast<const void*>(&_M_storage); }
      187:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZ17liveness_analysesRKSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteISB_EESaISE_EEE13LivenessStateEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx114listIiSaIiEEEEE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufIiE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7_M_addrEv:
      338:   66:      _M_addr() const noexcept
      338:   67:      { return static_cast<const void*>(&_M_storage); }
      338:   67-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufIP10BasicBlockE7_M_addrEv:
    #####:   66:      _M_addr() const noexcept
    #####:   67:      { return static_cast<const void*>(&_M_storage); }
    %%%%%:   67-block  0
------------------
        -:   68:
        -:   69:      _Tp*
    1348*:   70:      _M_ptr() noexcept
    1348*:   71:      { return static_cast<_Tp*>(_M_addr()); }
------------------
_ZN9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv:
       72:   70:      _M_ptr() noexcept
       72:   71:      { return static_cast<_Tp*>(_M_addr()); }
       72:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_EE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufIP10BasicBlockE6_M_ptrEv:
       88:   70:      _M_ptr() noexcept
       88:   71:      { return static_cast<_Tp*>(_M_addr()); }
       88:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIiSaIiEEEE6_M_ptrEv:
      357:   70:      _M_ptr() noexcept
      357:   71:      { return static_cast<_Tp*>(_M_addr()); }
      357:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt3setIP10BasicBlockSt4lessISB_ESaISB_EEEE6_M_ptrEv:
       73:   70:      _M_ptr() noexcept
       73:   71:      { return static_cast<_Tp*>(_M_addr()); }
       73:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiSt3setIiSt4lessIiESaIiEEEE6_M_ptrEv:
      302:   70:      _M_ptr() noexcept
      302:   71:      { return static_cast<_Tp*>(_M_addr()); }
      302:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiiEE6_M_ptrEv:
      247:   70:      _M_ptr() noexcept
      247:   71:      { return static_cast<_Tp*>(_M_addr()); }
      247:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiP10BasicBlockEE6_M_ptrEv:
      180:   70:      _M_ptr() noexcept
      180:   71:      { return static_cast<_Tp*>(_M_addr()); }
      180:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiZ13live_analysesRSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteIS5_EESaIS8_EEE14BlockLiveStateEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6_M_ptrEv:
       29:   70:      _M_ptr() noexcept
       29:   71:      { return static_cast<_Tp*>(_M_addr()); }
       29:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZ17liveness_analysesRKSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteISB_EESaISE_EEE13LivenessStateEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx114listIiSaIiEEEEE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
_ZN9__gnu_cxx16__aligned_membufIiE6_M_ptrEv:
    #####:   70:      _M_ptr() noexcept
    #####:   71:      { return static_cast<_Tp*>(_M_addr()); }
    %%%%%:   71-block  0
------------------
        -:   72:
        -:   73:      const _Tp*
    2415*:   74:      _M_ptr() const noexcept
    2415*:   75:      { return static_cast<const _Tp*>(_M_addr()); }
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt6vectorIiSaIiEEEE6_M_ptrEv:
      707:   74:      _M_ptr() const noexcept
      707:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      707:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESt3setIP10BasicBlockSt4lessISB_ESaISB_EEEE6_M_ptrEv:
      111:   74:      _M_ptr() const noexcept
      111:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      111:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiiEE6_M_ptrEv:
      153:   74:      _M_ptr() const noexcept
      153:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      153:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiP10BasicBlockEE6_M_ptrEv:
      288:   74:      _M_ptr() const noexcept
      288:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      288:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiSt3setIiSt4lessIiESaIiEEEE6_M_ptrEv:
      631:   74:      _M_ptr() const noexcept
      631:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      631:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiZ13live_analysesRSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteIS5_EESaIS8_EEE14BlockLiveStateEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiSt8optionalINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE6_M_ptrEv:
      187:   74:      _M_ptr() const noexcept
      187:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      187:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEZ17liveness_analysesRKSt6vectorISt10unique_ptrI10BasicBlockSt14default_deleteISB_EESaISE_EEE13LivenessStateEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufISt4pairIKiNSt7__cxx114listIiSaIiEEEEE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufIiE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE6_M_ptrEv:
      338:   74:      _M_ptr() const noexcept
      338:   75:      { return static_cast<const _Tp*>(_M_addr()); }
      338:   75-block  0
------------------
_ZNK9__gnu_cxx16__aligned_membufIP10BasicBlockE6_M_ptrEv:
    #####:   74:      _M_ptr() const noexcept
    #####:   75:      { return static_cast<const _Tp*>(_M_addr()); }
    %%%%%:   75-block  0
------------------
        -:   76:    };
        -:   77:
        -:   78:#if _GLIBCXX_INLINE_VERSION
        -:   79:  template<typename _Tp>
        -:   80:    using __aligned_buffer = __aligned_membuf<_Tp>;
        -:   81:#else
        -:   82:  // Similar to __aligned_membuf but aligned for complete objects, not members.
        -:   83:  // This type is used in <forward_list>, <future>, <bits/shared_ptr_base.h>
        -:   84:  // and <bits/hashtable_policy.h>, but ideally they would use __aligned_membuf
        -:   85:  // instead, as it has smaller size for some types on some targets.
        -:   86:  // This type is still used to avoid an ABI change.
        -:   87:  template<typename _Tp>
        -:   88:    struct __aligned_buffer
        -:   89:    : std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>
        -:   90:    {
        -:   91:      typename
        -:   92:	std::aligned_storage<sizeof(_Tp), std::alignment_of<_Tp>::value>::type
        -:   93:	_M_storage;
        -:   94:
        -:   95:      __aligned_buffer() = default;
        -:   96:
        -:   97:      // Can be used to avoid value-initialization
        -:   98:      __aligned_buffer(std::nullptr_t) { }
        -:   99:
        -:  100:      void*
        -:  101:      _M_addr() noexcept
        -:  102:      {
        -:  103:        return static_cast<void*>(&_M_storage);
        -:  104:      }
        -:  105:
        -:  106:      const void*
        -:  107:      _M_addr() const noexcept
        -:  108:      {
        -:  109:        return static_cast<const void*>(&_M_storage);
        -:  110:      }
        -:  111:
        -:  112:      _Tp*
        -:  113:      _M_ptr() noexcept
        -:  114:      { return static_cast<_Tp*>(_M_addr()); }
        -:  115:
        -:  116:      const _Tp*
        -:  117:      _M_ptr() const noexcept
        -:  118:      { return static_cast<const _Tp*>(_M_addr()); }
        -:  119:    };
        -:  120:#endif
        -:  121:
        -:  122:} // namespace
        -:  123:
        -:  124:#endif /* _ALIGNED_BUFFER_H */
