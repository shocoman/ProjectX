        -:    0:Source:D:/programming/c/tac_parser/grammar/parser.y
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\parser.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\parser.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:%skeleton "lalr1.cc"
        -:    2:%require "3.7.1"
        -:    3:%defines
        -:    4:
        -:    5:%define api.token.raw
        -:    6:%define api.token.constructor
        -:    7:%define api.value.type variant
        -:    8:%define parse.assert
        -:    9:
        -:   10:%code requires {
        -:   11:    #include <string>
        -:   12:    struct driver;
        -:   13:    #include "../tac_worker/quadruple.hpp"
        -:   14:}
        -:   15:
        -:   16:%param { driver& drv }
        -:   17:%locations
        -:   18:
        -:   19:%define parse.trace
        -:   20:%define parse.error detailed
        -:   21:%define parse.lac full
        -:   22:
        -:   23:%code {
        -:   24:    #include "../driver/driver.hpp"
        -:   25:}
        -:   26:
        -:   27:%define api.token.prefix {TOK_}
        -:   28:%token
        -:   29:    IFTRUE  "if"
        -:   30:    IFFALSE "ifFalse"
        -:   31:    GOTO    "goto"
        -:   32:    HALT    "halt"
        -:   33:    CALL    "call"
        -:   34:    PARAM   "param"
        -:   35:    NOP     "nop"
        -:   36:    RETURN  "return"
        -:   37:    NEWLINE "newline"
        -:   38:
        -:   39:    ASSIGN  "="
        -:   40:    PLUS    "+"
        -:   41:    MINUS   "-"
        -:   42:    MULT    "*"
        -:   43:    DIV     "/"
        -:   44:    REF     "&"
        -:   45:
        -:   46:    CMP_LT  "<"
        -:   47:    CMP_GT  ">"
        -:   48:    CMP_EQ  "=="
        -:   49:    CMP_NEQ "!="
        -:   50:
        -:   51:    LPAREN  "("
        -:   52:    RPAREN  ")"
        -:   53:    LBRACKET "["
        -:   54:    RBRACKET "]"
        -:   55:    SEMI    ";"
        -:   56:    COLON   ":"
        -:   57:    ;
        -:   58:
        -:   59:%token <std::string> IDENTIFIER "identifier"
        -:   60:%token <int> INT "int"
        -:   61:%token <double> FLOAT "float"
        -:   62:
        -:   63:
        -:   64:%nterm <Dest> dest
        -:   65:%nterm <Quad> value quadruple if_statement goto assignment
        -:   66:%nterm <std::string> term label
        -:   67://%nterm <std::vector<Quad>> stmts
        -:   68:
        -:   69:%left "<" ">" "==" "!="
        -:   70:%left "+" "-";
        -:   71:%left "*" "/";
        -:   72:
        -:   73:// %printer { yyo << $$; } <*>;
        -:   74:%%
        -:   75:%start stmts;
        -:   76:
        -:   77:stmts:
        -:   78:    %empty
        -:   79:|   stmts stmt
        -:   80:;
        -:   81:
        -:   82:
        -:   83:stmt:
        9:   84:    label mb_newline               { drv.labels.emplace($label, drv.quadruples.size()); }
        9:   84-block  0
        9:   84-block  1
    $$$$$:   84-block  2
       27:   85:|   quadruple newlines     { drv.quadruples.push_back($quadruple); }
       27:   85-block  0
        -:   86:;
        -:   87:mb_newline: %empty | "newline";
        -:   88:newlines: YYEOF | "newline" | newlines "newline";
        -:   89:
        -:   90:
        -:   91:quadruple:
       21:   92:    assignment
       21:   92-block  0
        3:   93:|   if_statement
        3:   93-block  0
        2:   94:|   goto
        2:   94-block  0
    #####:   95:|   "halt"                          { $$ = Quad({}, {}, Quad::Type::Halt); };
    %%%%%:   95-block  0
    %%%%%:   95-block  1
    %%%%%:   95-block  2
    $$$$$:   95-block  3
    $$$$$:   95-block  4
    $$$$$:   95-block  5
    $$$$$:   95-block  6
    $$$$$:   95-block  7
    $$$$$:   95-block  8
    #####:   96:|   "param" term                    { $$ = Quad($term, {}, Quad::Type::Param); };
    %%%%%:   96-block  0
    %%%%%:   96-block  1
    %%%%%:   96-block  2
    %%%%%:   96-block  3
    $$$$$:   96-block  4
    $$$$$:   96-block  5
    $$$$$:   96-block  6
    $$$$$:   96-block  7
    $$$$$:   96-block  8
    $$$$$:   96-block  9
    #####:   97:|   "call"  "identifier"[id] term   { $$ = Quad($id, $term, Quad::Type::Call); };
    %%%%%:   97-block  0
    %%%%%:   97-block  1
    %%%%%:   97-block  2
    %%%%%:   97-block  3
    %%%%%:   97-block  4
    $$$$$:   97-block  5
    $$$$$:   97-block  6
    $$$$$:   97-block  7
    $$$$$:   97-block  8
    $$$$$:   97-block  9
    $$$$$:   97-block 10
    #####:   98:|   "nop"                           { $$ = Quad({}, {}, Quad::Type::Nop); };
    %%%%%:   98-block  0
    %%%%%:   98-block  1
    %%%%%:   98-block  2
    $$$$$:   98-block  3
    $$$$$:   98-block  4
    $$$$$:   98-block  5
    $$$$$:   98-block  6
    $$$$$:   98-block  7
    $$$$$:   98-block  8
        1:   99:|   "return"        { $$ = Quad({}, {}, Quad::Type::Return); };
        1:   99-block  0
        1:   99-block  1
        1:   99-block  2
    $$$$$:   99-block  3
    $$$$$:   99-block  4
    $$$$$:   99-block  5
    $$$$$:   99-block  6
    $$$$$:   99-block  7
    $$$$$:   99-block  8
        -:  100:;
        -:  101:
       21:  102:assignment: dest "=" value { $value.dest = $dest; $$ = $value; };
       21:  102-block  0
       21:  102-block  1
        -:  103:
        -:  104:if_statement:
        3:  105:    "if" term "goto" "identifier"[id]        { $$ = Quad($term, {}, Quad::Type::IfTrue);
        3:  105-block  0
        3:  105-block  1
        3:  105-block  2
        3:  105-block  3
    $$$$$:  105-block  4
    $$$$$:  105-block  5
    $$$$$:  105-block  6
    $$$$$:  105-block  7
    $$$$$:  105-block  8
    $$$$$:  105-block  9
        3:  106:                                                $$.dest = Dest($id, {}, Dest::Type::JumpLabel); }
        3:  106-block  0
        3:  106-block  1
    $$$$$:  106-block  2
    $$$$$:  106-block  3
    #####:  107:|   "ifFalse" term "goto" "identifier"[id]   { $$ = Quad($term, {}, Quad::Type::IfFalse);
    %%%%%:  107-block  0
    %%%%%:  107-block  1
    %%%%%:  107-block  2
    %%%%%:  107-block  3
    $$$$$:  107-block  4
    $$$$$:  107-block  5
    $$$$$:  107-block  6
    $$$$$:  107-block  7
    $$$$$:  107-block  8
    $$$$$:  107-block  9
    #####:  108:                                                $$.dest = Dest($id, {}, Dest::Type::JumpLabel);}
    %%%%%:  108-block  0
    %%%%%:  108-block  1
    $$$$$:  108-block  2
    $$$$$:  108-block  3
        -:  109:;
        -:  110:
        2:  111:goto: "goto" "identifier"[id]   { $$ = Quad({}, {}, Quad::Type::Goto);
        2:  111-block  0
        2:  111-block  1
        2:  111-block  2
    $$$$$:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
    $$$$$:  111-block  7
    $$$$$:  111-block  8
        2:  112:                                $$.dest = Dest($id, {}, Dest::Type::JumpLabel);};
        2:  112-block  0
        2:  112-block  1
    $$$$$:  112-block  2
    $$$$$:  112-block  3
        -:  113:
        -:  114:
        -:  115:
        -:  116:dest:
       21:  117:    "identifier"                { $$ = Dest($1, {}, Dest::Type::Var); }
       21:  117-block  0
       21:  117-block  1
       21:  117-block  2
    $$$$$:  117-block  3
    $$$$$:  117-block  4
    #####:  118:|   "*" "identifier"            { $$ = Dest($2, {}, Dest::Type::Deref); }
    %%%%%:  118-block  0
    %%%%%:  118-block  1
    %%%%%:  118-block  2
    $$$$$:  118-block  3
    $$$$$:  118-block  4
    #####:  119:|   "identifier" "[" term "]"   { $$ = Dest($1, $term, Dest::Type::ArraySet); }
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
    $$$$$:  119-block  3
    $$$$$:  119-block  4
        -:  120:
        -:  121:label:
        9:  122:    "identifier" ":" { $$ = $1; }
        9:  122-block  0
        -:  123:;
        -:  124:
        -:  125:
        -:  126:value:
       15:  127:    term                    { $$ = Quad($1, {}, Quad::Type::Assign); }
       15:  127-block  0
       15:  127-block  1
       15:  127-block  2
       15:  127-block  3
    $$$$$:  127-block  4
    $$$$$:  127-block  5
    $$$$$:  127-block  6
    $$$$$:  127-block  7
    $$$$$:  127-block  8
    $$$$$:  127-block  9
    #####:  128:|   "*" term                { $$ = Quad($2, {}, Quad::Type::Deref); }
    %%%%%:  128-block  0
    %%%%%:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    $$$$$:  128-block  4
    $$$$$:  128-block  5
    $$$$$:  128-block  6
    $$$$$:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
    #####:  129:|   "-" term                { $$ = Quad($2, {}, Quad::Type::UMinus); }
    %%%%%:  129-block  0
    %%%%%:  129-block  1
    %%%%%:  129-block  2
    %%%%%:  129-block  3
    $$$$$:  129-block  4
    $$$$$:  129-block  5
    $$$$$:  129-block  6
    $$$$$:  129-block  7
    $$$$$:  129-block  8
    $$$$$:  129-block  9
    #####:  130:|   "&" term                { $$ = Quad($2, {}, Quad::Type::Ref); }
    %%%%%:  130-block  0
    %%%%%:  130-block  1
    %%%%%:  130-block  2
    %%%%%:  130-block  3
    $$$$$:  130-block  4
    $$$$$:  130-block  5
    $$$$$:  130-block  6
    $$$$$:  130-block  7
    $$$$$:  130-block  8
    $$$$$:  130-block  9
    #####:  131:|   term "[" term "]"       { $$ = Quad($1, $3, Quad::Type::ArrayGet); }
    %%%%%:  131-block  0
    %%%%%:  131-block  1
    %%%%%:  131-block  2
    %%%%%:  131-block  3
    %%%%%:  131-block  4
    $$$$$:  131-block  5
    $$$$$:  131-block  6
    $$$$$:  131-block  7
    $$$$$:  131-block  8
    $$$$$:  131-block  9
    $$$$$:  131-block 10
        3:  132:|   term "+"  term          { $$ = Quad($1, $3, Quad::Type::Add); }
        3:  132-block  0
        3:  132-block  1
        3:  132-block  2
        3:  132-block  3
        3:  132-block  4
    $$$$$:  132-block  5
    $$$$$:  132-block  6
    $$$$$:  132-block  7
    $$$$$:  132-block  8
    $$$$$:  132-block  9
    $$$$$:  132-block 10
    #####:  133:|   term "-"  term          { $$ = Quad($1, $3, Quad::Type::Sub); }
    %%%%%:  133-block  0
    %%%%%:  133-block  1
    %%%%%:  133-block  2
    %%%%%:  133-block  3
    %%%%%:  133-block  4
    $$$$$:  133-block  5
    $$$$$:  133-block  6
    $$$$$:  133-block  7
    $$$$$:  133-block  8
    $$$$$:  133-block  9
    $$$$$:  133-block 10
    #####:  134:|   term "*"  term          { $$ = Quad($1, $3, Quad::Type::Mult); }
    %%%%%:  134-block  0
    %%%%%:  134-block  1
    %%%%%:  134-block  2
    %%%%%:  134-block  3
    %%%%%:  134-block  4
    $$$$$:  134-block  5
    $$$$$:  134-block  6
    $$$$$:  134-block  7
    $$$$$:  134-block  8
    $$$$$:  134-block  9
    $$$$$:  134-block 10
    #####:  135:|   term "/"  term          { $$ = Quad($1, $3, Quad::Type::Div); }
    %%%%%:  135-block  0
    %%%%%:  135-block  1
    %%%%%:  135-block  2
    %%%%%:  135-block  3
    %%%%%:  135-block  4
    $$$$$:  135-block  5
    $$$$$:  135-block  6
    $$$$$:  135-block  7
    $$$$$:  135-block  8
    $$$$$:  135-block  9
    $$$$$:  135-block 10
        3:  136:|   term "<"  term          { $$ = Quad($1, $3, Quad::Type::Lt); }
        3:  136-block  0
        3:  136-block  1
        3:  136-block  2
        3:  136-block  3
        3:  136-block  4
    $$$$$:  136-block  5
    $$$$$:  136-block  6
    $$$$$:  136-block  7
    $$$$$:  136-block  8
    $$$$$:  136-block  9
    $$$$$:  136-block 10
    #####:  137:|   term ">"  term          { $$ = Quad($1, $3, Quad::Type::Gt); }
    %%%%%:  137-block  0
    %%%%%:  137-block  1
    %%%%%:  137-block  2
    %%%%%:  137-block  3
    %%%%%:  137-block  4
    $$$$$:  137-block  5
    $$$$$:  137-block  6
    $$$$$:  137-block  7
    $$$$$:  137-block  8
    $$$$$:  137-block  9
    $$$$$:  137-block 10
    #####:  138:|   term "==" term          { $$ = Quad($1, $3, Quad::Type::Eq); }
    %%%%%:  138-block  0
    %%%%%:  138-block  1
    %%%%%:  138-block  2
    %%%%%:  138-block  3
    %%%%%:  138-block  4
    $$$$$:  138-block  5
    $$$$$:  138-block  6
    $$$$$:  138-block  7
    $$$$$:  138-block  8
    $$$$$:  138-block  9
    $$$$$:  138-block 10
    #####:  139:|   term "!=" term          { $$ = Quad($1, $3, Quad::Type::Neq); }
    %%%%%:  139-block  0
    %%%%%:  139-block  1
    %%%%%:  139-block  2
    %%%%%:  139-block  3
    %%%%%:  139-block  4
    $$$$$:  139-block  5
    $$$$$:  139-block  6
    $$$$$:  139-block  7
    $$$$$:  139-block  8
    $$$$$:  139-block  9
    $$$$$:  139-block 10
        -:  140:;
        -:  141:
        -:  142:term:
       13:  143:    "identifier"    { $$ = $1; }
       13:  143-block  0
       17:  144:|   "int"           { $$ = std::to_string($1); }
       17:  144-block  0
       17:  144-block  1
    #####:  145:|   "float"         { $$ = std::to_string($1); }
    %%%%%:  145-block  0
    %%%%%:  145-block  1
        -:  146:;
        -:  147:
        -:  148:
        -:  149:%%
        -:  150:
    #####:  151:void yy::parser::error(const location_type& l, const std::string& m) {
    #####:  152:    std::cerr << l << ": " << m << std::endl;
    %%%%%:  152-block  0
    #####:  153:}
