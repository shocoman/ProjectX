        -:    0:Source:D:/programming/c/tac_parser/tac_worker/local_value_numbering.h
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://
        -:    2:// Created by shoco on 10/15/2020.
        -:    3://
        -:    4:
        -:    5:#ifndef TAC_PARSER_LOCAL_VALUE_NUMBERING_H
        -:    6:#define TAC_PARSER_LOCAL_VALUE_NUMBERING_H
        -:    7:
        -:    8:#include <string>
        -:    9:#include <map>
        -:   10:#include <vector>
        -:   11:#include <functional>
        -:   12:
        -:   13:#include "quadruple.hpp"
        -:   14:#include "basic_block.h"
        -:   15:
        -:   16:
        -:   17:using OpRecord = std::tuple<Quad::Type, std::vector<int>>;
        -:   18:struct ValueNumberTable {
        -:   19:    std::map<std::string, int> value_numbers;
        -:   20:    std::map<int, std::string> value_numbers_to_names;
        -:   21:    std::map<OpRecord, int> operations;
        -:   22:};
        -:   23:
        -:   24:
        -:   25:struct ValueNumberTableStack {
        -:   26:    std::vector<ValueNumberTable> tables;
        -:   27:    int current_number = 0;
        -:   28:
    #####:   29:    void set_value_number_for_name(std::string name, int value) {
    #####:   30:        tables.back().value_numbers[name] = value;
    %%%%%:   30-block  0
    #####:   31:    }
        -:   32:
    #####:   33:    void set_name_for_value(int value, std::string name) {
    #####:   34:        tables.back().value_numbers_to_names[value] = name;
    %%%%%:   34-block  0
    #####:   35:    }
        -:   36:
    #####:   37:    void set_operation_value(OpRecord op, int value) {
    #####:   38:        tables.back().operations[op] = value;
    %%%%%:   38-block  0
    #####:   39:    }
        -:   40:
    #####:   41:    std::optional<int> get_value_number_by_name(const std::string &name) {
    #####:   42:        for (auto it = tables.rbegin(); it != tables.rend(); ++it) {
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    %%%%%:   42-block  2
    %%%%%:   42-block  3
    $$$$$:   42-block  4
    #####:   43:            if (auto v = it->value_numbers.find(name); v != it->value_numbers.end()) {
    %%%%%:   43-block  0
    %%%%%:   43-block  1
    %%%%%:   43-block  2
    %%%%%:   43-block  3
    #####:   44:                return v->second;
    %%%%%:   44-block  0
    %%%%%:   44-block  1
        -:   45:            }
        -:   46:        }
    #####:   47:        return {};
    %%%%%:   47-block  0
        -:   48:    }
        -:   49:
    #####:   50:    std::optional<std::string> get_name_by_value_number(int value) {
    #####:   51:        for (auto it = tables.rbegin(); it != tables.rend(); ++it) {
    %%%%%:   51-block  0
    %%%%%:   51-block  1
    %%%%%:   51-block  2
    %%%%%:   51-block  3
    $$$$$:   51-block  4
    #####:   52:            if (auto n = it->value_numbers_to_names.find(value); n != it->value_numbers_to_names.end()) {
    %%%%%:   52-block  0
    %%%%%:   52-block  1
    %%%%%:   52-block  2
    %%%%%:   52-block  3
    #####:   53:                return n->second;
    %%%%%:   53-block  0
    %%%%%:   53-block  1
        -:   54:            }
        -:   55:        }
    #####:   56:        return {};
    %%%%%:   56-block  0
        -:   57:    }
        -:   58:
    #####:   59:    std::optional<int> get_value_number_by_operation(const OpRecord &op) {
    #####:   60:        for (auto it = tables.rbegin(); it != tables.rend(); ++it) {
    %%%%%:   60-block  0
    %%%%%:   60-block  1
    %%%%%:   60-block  2
    %%%%%:   60-block  3
    $$$$$:   60-block  4
    #####:   61:            if (auto v = it->operations.find(op); v != it->operations.end()) {
    %%%%%:   61-block  0
    %%%%%:   61-block  1
    %%%%%:   61-block  2
    %%%%%:   61-block  3
    #####:   62:                return v->second;
    %%%%%:   62-block  0
    %%%%%:   62-block  1
        -:   63:            }
        -:   64:        }
    #####:   65:        return {};
    %%%%%:   65-block  0
        -:   66:    }
        -:   67:
    #####:   68:    void push_table() {
    #####:   69:        tables.emplace_back();
    %%%%%:   69-block  0
    #####:   70:    }
        -:   71:
    #####:   72:    void pop_table() {
    #####:   73:        tables.pop_back();
    %%%%%:   73-block  0
    #####:   74:    }
        -:   75:};
        -:   76:
        -:   77:
    #####:   78:static void constant_folding(Quad &n) {
    #####:   79:    double l = n.get_op(0)->get_double();
    %%%%%:   79-block  0
    #####:   80:    double r = n.get_op(1)->get_double();
    #####:   81:    bool is_lnum = n.get_op(0)->is_number();
    #####:   82:    bool is_rnum = n.get_op(1)->is_number();
        -:   83:
    #####:   84:    if (is_lnum && is_rnum) {
    %%%%%:   84-block  0
    #####:   85:        double res = 0;
    #####:   86:        switch (n.type) {
    %%%%%:   86-block  0
    #####:   87:            case Quad::Type::Add:
    #####:   88:                res = l + r;
    #####:   89:                break;
    %%%%%:   89-block  0
    #####:   90:            case Quad::Type::Sub:
    #####:   91:                res = l - r;
    #####:   92:                break;
    %%%%%:   92-block  0
    #####:   93:            case Quad::Type::Mult:
    #####:   94:                res = l * r;
    #####:   95:                break;
    %%%%%:   95-block  0
    #####:   96:            case Quad::Type::Div:
    #####:   97:                res = l / r;
    #####:   98:                break;
    %%%%%:   98-block  0
    #####:   99:            default:
    #####:  100:                break;
    %%%%%:  100-block  0
        -:  101:        }
    #####:  102:        n.ops[0] = std::to_string(res);
    %%%%%:  102-block  0
    %%%%%:  102-block  1
    $$$$$:  102-block  2
    $$$$$:  102-block  3
    #####:  103:        n.type = Quad::Type::Assign;
    #####:  104:        n.clear_op(1);
    #####:  105:        return;
        -:  106:    }
        -:  107:
        -:  108:    // algebraic identities
        -:  109:    // a - a = 0
    #####:  110:    if (n.type == Quad::Type::Sub && n.get_op(0) == n.get_op(1)) {
    %%%%%:  110-block  0
    %%%%%:  110-block  1
    %%%%%:  110-block  2
    %%%%%:  110-block  3
    %%%%%:  110-block  4
    %%%%%:  110-block  5
    %%%%%:  110-block  6
    %%%%%:  110-block  7
    %%%%%:  110-block  8
    %%%%%:  110-block  9
    %%%%%:  110-block 10
    %%%%%:  110-block 11
    $$$$$:  110-block 12
    $$$$$:  110-block 13
    $$$$$:  110-block 14
    $$$$$:  110-block 15
    $$$$$:  110-block 16
    $$$$$:  110-block 17
    #####:  111:        n.ops[0] = Operand("0");
    %%%%%:  111-block  0
    %%%%%:  111-block  1
    %%%%%:  111-block  2
    $$$$$:  111-block  3
    $$$$$:  111-block  4
    $$$$$:  111-block  5
    $$$$$:  111-block  6
    #####:  112:        n.clear_op(1);
    #####:  113:        n.type = Quad::Type::Assign;
        -:  114:    }
        -:  115:    // a / a = 1, a != 0
    #####:  116:    if (n.type == Quad::Type::Div && n.get_op(0) == n.get_op(1) && n.get_op(1)->value != "0") {
    %%%%%:  116-block  0
    %%%%%:  116-block  1
    %%%%%:  116-block  2
    %%%%%:  116-block  3
    %%%%%:  116-block  4
    %%%%%:  116-block  5
    %%%%%:  116-block  6
    %%%%%:  116-block  7
    %%%%%:  116-block  8
    %%%%%:  116-block  9
    %%%%%:  116-block 10
    %%%%%:  116-block 11
    %%%%%:  116-block 12
    %%%%%:  116-block 13
    %%%%%:  116-block 14
    %%%%%:  116-block 15
    %%%%%:  116-block 16
    $$$$$:  116-block 17
    $$$$$:  116-block 18
    $$$$$:  116-block 19
    $$$$$:  116-block 20
    $$$$$:  116-block 21
    $$$$$:  116-block 22
    $$$$$:  116-block 23
    $$$$$:  116-block 24
    $$$$$:  116-block 25
    #####:  117:        n.ops[0] = Operand("1");
    %%%%%:  117-block  0
    %%%%%:  117-block  1
    %%%%%:  117-block  2
    $$$$$:  117-block  3
    $$$$$:  117-block  4
    $$$$$:  117-block  5
    $$$$$:  117-block  6
    #####:  118:        n.clear_op(1);
    #####:  119:        n.type = Quad::Type::Assign;
        -:  120:    }
        -:  121:
    #####:  122:    if (is_lnum || is_rnum) {
    %%%%%:  122-block  0
    %%%%%:  122-block  1
        -:  123:        // a * 0 = 0
    #####:  124:        if (n.type == Quad::Type::Mult && (l == 0 && is_lnum || r == 0 && is_rnum)) {
    %%%%%:  124-block  0
    %%%%%:  124-block  1
    %%%%%:  124-block  2
    %%%%%:  124-block  3
    %%%%%:  124-block  4
    #####:  125:            n.get_op(0) = Operand("0").value;
    %%%%%:  125-block  0
    %%%%%:  125-block  1
    %%%%%:  125-block  2
    %%%%%:  125-block  3
    %%%%%:  125-block  4
    $$$$$:  125-block  5
    $$$$$:  125-block  6
    $$$$$:  125-block  7
    $$$$$:  125-block  8
    $$$$$:  125-block  9
    $$$$$:  125-block 10
    $$$$$:  125-block 11
    $$$$$:  125-block 12
    #####:  126:            n.clear_op(1);
    #####:  127:            n.type = Quad::Type::Assign;
        -:  128:        }
        -:  129:
    #####:  130:        if (is_lnum) {
    %%%%%:  130-block  0
        -:  131:            // 0 + a = a OR 1 * a = a
    #####:  132:            if (n.type == Quad::Type::Add && l == 0 || n.type == Quad::Type::Mult && l == 1) {
    %%%%%:  132-block  0
    %%%%%:  132-block  1
    %%%%%:  132-block  2
    %%%%%:  132-block  3
    #####:  133:                n.ops[0] = n.get_op(1).value();
    %%%%%:  133-block  0
    %%%%%:  133-block  1
    $$$$$:  133-block  2
    $$$$$:  133-block  3
    #####:  134:                n.clear_op(1);
    #####:  135:                n.type = Quad::Type::Assign;
        -:  136:            }
        -:  137:                // 2 * a = a + a
    #####:  138:            else if (n.type == Quad::Type::Mult && l == 2) {
    %%%%%:  138-block  0
    %%%%%:  138-block  1
    #####:  139:                n.ops[0] = n.get_op(1).value();
    %%%%%:  139-block  0
    %%%%%:  139-block  1
    $$$$$:  139-block  2
    $$$$$:  139-block  3
    #####:  140:                n.type = Quad::Type::Add;
        -:  141:            }
        -:  142:        }
        -:  143:
    #####:  144:        if (is_rnum) {
    %%%%%:  144-block  0
        -:  145:            // a + 0 = a OR a * 1 = a OR a - 0 = a OR a / 1 = a
    #####:  146:            if (n.type == Quad::Type::Add && r == 0
    %%%%%:  146-block  0
    %%%%%:  146-block  1
    #####:  147:                || n.type == Quad::Type::Mult && r == 1
    %%%%%:  147-block  0
    %%%%%:  147-block  1
    #####:  148:                || n.type == Quad::Type::Sub && r == 0
    %%%%%:  148-block  0
    %%%%%:  148-block  1
    #####:  149:                || n.type == Quad::Type::Div && r == 1) {
    %%%%%:  149-block  0
    %%%%%:  149-block  1
    #####:  150:                n.clear_op(1);
    %%%%%:  150-block  0
    #####:  151:                n.type = Quad::Type::Assign;
        -:  152:            }
        -:  153:                // a * 2 = a + a
    #####:  154:            else if (n.type == Quad::Type::Mult && r == 2) {
    %%%%%:  154-block  0
    %%%%%:  154-block  1
    #####:  155:                n.ops[1] = n.get_op(0).value();
    %%%%%:  155-block  0
    %%%%%:  155-block  1
    $$$$$:  155-block  2
    #####:  156:                n.type = Quad::Type::Add;
        -:  157:            }
        -:  158:        }
        -:  159:    }
        -:  160:
        -:  161:}
        -:  162:
        -:  163:
    #####:  164:static void local_value_numbering(std::vector<Quad> &quads, ValueNumberTableStack &t) {
        -:  165://    std::map<std::string, int> value_numbers;
        -:  166://    std::map<int, std::string> value_numbers_to_names;
        -:  167://    std::map<OpRecord, int> operations;
        -:  168:
        -:  169://    quads.emplace_back(Quad("x", "y", Quad::Type::Add, Dest("a", {}, Dest::Type::Var)));
        -:  170://    quads.emplace_back(Quad("x", "y", Quad::Type::Add, Dest("b", {}, Dest::Type::Var)));
        -:  171://    quads.emplace_back(Quad("17", "4", Quad::Type::Div, Dest("Z", {}, Dest::Type::Var)));
        -:  172://    quads.emplace_back(Quad("x", "y", Quad::Type::Add, Dest("c", {}, Dest::Type::Var)));
        -:  173://    quads.emplace_back(Quad("t1", {}, Quad::Type::IfTrue, Dest("LABEL2", {}, Dest::Type::JumpLabel)));
        -:  174://    quads.emplace_back(Quad("t1", {}, Quad::Type::IfTrue, Dest("LABEL2", {}, Dest::Type::JumpLabel)));
        -:  175:
        -:  176:
    #####:  177:    for (auto &q : quads) {
    %%%%%:  177-block  0
    %%%%%:  177-block  1
    %%%%%:  177-block  2
    %%%%%:  177-block  3
    #####:  178:        if (q.is_jump()) {
    #####:  179:            std::cout << q.fmt() << std::endl;
    %%%%%:  179-block  0
    %%%%%:  179-block  1
    %%%%%:  179-block  2
    %%%%%:  179-block  3
    $$$$$:  179-block  4
    $$$$$:  179-block  5
    #####:  180:            continue;
        -:  181:        }
        -:  182:
    #####:  183:        if (q.type != Quad::Type::Assign) {
    %%%%%:  183-block  0
        -:  184:            //constant_folding(q);
        -:  185:        }
        -:  186:
        -:  187:        // generate and/or save value number for every operand
    #####:  188:        auto operand_values = std::vector<int>{};
    %%%%%:  188-block  0
    $$$$$:  188-block  1
    #####:  189:        for (auto &op : q.get_rhs()) {
    %%%%%:  189-block  0
    %%%%%:  189-block  1
    %%%%%:  189-block  2
    %%%%%:  189-block  3
    %%%%%:  189-block  4
    $$$$$:  189-block  5
    #####:  190:            if (op.empty()) continue;
    %%%%%:  190-block  0
        -:  191:
    #####:  192:            if (!t.get_value_number_by_name(op).has_value()) {
    %%%%%:  192-block  0
    %%%%%:  192-block  1
    #####:  193:                t.set_value_number_for_name(op, t.current_number);
    %%%%%:  193-block  0
    %%%%%:  193-block  1
    %%%%%:  193-block  2
    $$$$$:  193-block  3
    $$$$$:  193-block  4
    #####:  194:                t.set_name_for_value(t.current_number, op);
    %%%%%:  194-block  0
    %%%%%:  194-block  1
    $$$$$:  194-block  2
    $$$$$:  194-block  3
    #####:  195:                if (q.type != Quad::Type::Assign)
    #####:  196:                    t.current_number++;
    %%%%%:  196-block  0
        -:  197:            }
    #####:  198:            operand_values.push_back(t.get_value_number_by_name(op).value());
    %%%%%:  198-block  0
    %%%%%:  198-block  1
    %%%%%:  198-block  2
    %%%%%:  198-block  3
    $$$$$:  198-block  4
        -:  199://            if (value_numbers.find(op) == value_numbers.end()) {
        -:  200://                value_numbers[op] = current_number;
        -:  201://                value_numbers_to_names[current_number] = op;
        -:  202://                if (q.type != Quad::Type::Assign)
        -:  203://                    current_number++;
        -:  204://            }
        -:  205://            operand_values.push_back(value_numbers.at(op));
        -:  206:        }
        -:  207:
    #####:  208:        if (Quad::is_commutative(q.type))
    #####:  209:            std::sort(operand_values.begin(), operand_values.end());
    %%%%%:  209-block  0
    #####:  210:        auto op_hash_key = std::tuple{q.type, operand_values};
    %%%%%:  210-block  0
    $$$$$:  210-block  1
        -:  211:
        -:  212:        // if hash key is already in the table replace current type with a copy
        -:  213:        // otherwise insert new value number with hash key
        -:  214:        int op_value;
    #####:  215:        auto op = t.get_value_number_by_operation(op_hash_key);
    %%%%%:  215-block  0
    #####:  216:        if (op.has_value() && op == t.get_value_number_by_name(*t.get_name_by_value_number(*op))) {
    %%%%%:  216-block  0
    %%%%%:  216-block  1
    %%%%%:  216-block  2
    %%%%%:  216-block  3
    %%%%%:  216-block  4
    %%%%%:  216-block  5
    %%%%%:  216-block  6
    %%%%%:  216-block  7
    %%%%%:  216-block  8
    %%%%%:  216-block  9
    $$$$$:  216-block 10
    $$$$$:  216-block 11
    $$$$$:  216-block 12
    $$$$$:  216-block 13
    #####:  217:            op_value = op.value();
    %%%%%:  217-block  0
        -:  218:
    #####:  219:            q.type = Quad::Type::Assign;
    #####:  220:            q.ops[0] = Operand(t.get_name_by_value_number(op_value).value());
    %%%%%:  220-block  0
    %%%%%:  220-block  1
    %%%%%:  220-block  2
    %%%%%:  220-block  3
    $$$$$:  220-block  4
    $$$$$:  220-block  5
    #####:  221:            q.clear_op(1);
        -:  222:
        -:  223:        } else {
    #####:  224:            t.set_operation_value(op_hash_key, t.current_number);
    %%%%%:  224-block  0
    %%%%%:  224-block  1
    %%%%%:  224-block  2
    $$$$$:  224-block  3
    $$$$$:  224-block  4
    #####:  225:            op_value = t.current_number;
        -:  226:
    #####:  227:            t.set_name_for_value(t.current_number, q.dest.value().dest_name);
    %%%%%:  227-block  0
    %%%%%:  227-block  1
    %%%%%:  227-block  2
    $$$$$:  227-block  3
    $$$$$:  227-block  4
    #####:  228:            t.current_number++;
        -:  229:        }
    #####:  230:        t.set_value_number_for_name(q.dest.value().dest_name, op_value);
    %%%%%:  230-block  0
    %%%%%:  230-block  1
    %%%%%:  230-block  2
    %%%%%:  230-block  3
    $$$$$:  230-block  4
    $$$$$:  230-block  5
        -:  231:
    #####:  232:        std::cout << q.fmt() << std::endl;
    %%%%%:  232-block  0
    %%%%%:  232-block  1
    %%%%%:  232-block  2
    $$$$$:  232-block  3
    $$$$$:  232-block  4
        -:  233://        auto op = operations.find(op_hash_key);
        -:  234://        if (op != operations.end() && op->second == value_numbers.at(value_numbers_to_names.at(op->second))) {
        -:  235://            op_value = op->second;
        -:  236://
        -:  237://            q.type = Quad::Type::Assign;
        -:  238://            q.get_op(0) = Operand(value_numbers_to_names.at(op_value));
        -:  239://            q.clear_op(1);
        -:  240://        } else {
        -:  241://            operations[op_hash_key] = current_number;
        -:  242://            op_value = current_number;
        -:  243://            value_numbers_to_names[current_number] = q.dest.value().dest_name;
        -:  244://            current_number++;
        -:  245://        }
        -:  246://        value_numbers[q.dest.value().dest_name] = op_value;
        -:  247:    }
    #####:  248:    std::cout << std::endl;
    %%%%%:  248-block  0
    #####:  249:}
        -:  250:
        -:  251:
    #####:  252:static void superlocal_value_numbering(std::vector<std::unique_ptr<BasicBlock>> &blocks) {
    #####:  253:    std::vector<BasicBlock *> work_list{blocks.front().get()};
    %%%%%:  253-block  0
    $$$$$:  253-block  1
    $$$$$:  253-block  2
    $$$$$:  253-block  3
    #####:  254:    std::set<int> visited_blocks;
    $$$$$:  254-block  0
        -:  255:
        -:  256:    using SVNFuncType = std::function<void(BasicBlock *, ValueNumberTableStack &)>;
        -:  257:    SVNFuncType SVN = [&](BasicBlock *b, ValueNumberTableStack &t) {
        -:  258:        visited_blocks.insert(b->id);
        -:  259:        t.push_table();
        -:  260:        local_value_numbering(b->quads, t);
        -:  261:
        -:  262:        for (auto &s : b->successors) {
        -:  263:            if (s->predecessors.size() == 1) {
        -:  264:                SVN(s, t);
        -:  265:            } else if (visited_blocks.find(b->id) == visited_blocks.end()) {
        -:  266:                work_list.push_back(s);
        -:  267:            }
        -:  268:        }
        -:  269:
        -:  270:        t.pop_table();
    #####:  271:    };
    $$$$$:  271-block  0
        -:  272:
    #####:  273:    ValueNumberTableStack t;
    %%%%%:  273-block  0
    %%%%%:  273-block  1
    $$$$$:  273-block  2
    #####:  274:    while (!work_list.empty()) {
    %%%%%:  274-block  0
    %%%%%:  274-block  1
    #####:  275:        BasicBlock *b = work_list.back();
    %%%%%:  275-block  0
    #####:  276:        work_list.pop_back();
    #####:  277:        SVN(b, t);
        -:  278:    }
        -:  279:
    #####:  280:}
        -:  281:
        -:  282:
        -:  283:#endif //TAC_PARSER_LOCAL_VALUE_NUMBERING_H
