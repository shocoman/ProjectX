        -:    0:Source:D:/programming/mingwW64/mingw64/lib/gcc/x86_64-w64-mingw32/8.1.0/include/c++/ext/new_allocator.h
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\main.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Allocator that wraps operator new -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2018 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file ext/new_allocator.h
        -:   26: *  This file is a GNU extension to the Standard C++ Library.
        -:   27: */
        -:   28:
        -:   29:#ifndef _NEW_ALLOCATOR_H
        -:   30:#define _NEW_ALLOCATOR_H 1
        -:   31:
        -:   32:#include <bits/c++config.h>
        -:   33:#include <new>
        -:   34:#include <bits/functexcept.h>
        -:   35:#include <bits/move.h>
        -:   36:#if __cplusplus >= 201103L
        -:   37:#include <type_traits>
        -:   38:#endif
        -:   39:
        -:   40:namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
        -:   41:{
        -:   42:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   43:
        -:   44:  using std::size_t;
        -:   45:  using std::ptrdiff_t;
        -:   46:
        -:   47:  /**
        -:   48:   *  @brief  An allocator that uses global new, as per [20.4].
        -:   49:   *  @ingroup allocators
        -:   50:   *
        -:   51:   *  This is precisely the allocator defined in the C++ Standard.
        -:   52:   *    - all allocation calls operator new
        -:   53:   *    - all deallocation calls operator delete
        -:   54:   *
        -:   55:   *  @tparam  _Tp  Type of allocated object.
        -:   56:   */
        -:   57:  template<typename _Tp>
        -:   58:    class new_allocator
        -:   59:    {
        -:   60:    public:
        -:   61:      typedef size_t     size_type;
        -:   62:      typedef ptrdiff_t  difference_type;
        -:   63:      typedef _Tp*       pointer;
        -:   64:      typedef const _Tp* const_pointer;
        -:   65:      typedef _Tp&       reference;
        -:   66:      typedef const _Tp& const_reference;
        -:   67:      typedef _Tp        value_type;
        -:   68:
        -:   69:      template<typename _Tp1>
        -:   70:	struct rebind
        -:   71:	{ typedef new_allocator<_Tp1> other; };
        -:   72:
        -:   73:#if __cplusplus >= 201103L
        -:   74:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   75:      // 2103. propagate_on_container_move_assignment
        -:   76:      typedef std::true_type propagate_on_container_move_assignment;
        -:   77:#endif
        -:   78:
     155*:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2Ev:
        1:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEEC2Ev:
        3:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEC2Ev:
       72:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEEC2Ev:
       69:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockEC2Ev:
        5:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2Ev:
        5:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2Ev:
    #####:   79:      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   80:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEEC2ERKSD_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEC2ERKSC_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEEC2ERKSC_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockEC2ERKS3_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiEC2ERKS1_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcEC2ERKS1_:
    #####:   81:      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   82:
        -:   83:      template<typename _Tp1>
        -:   84:	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }
        -:   85:
     802*:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEED2Ev:
        1:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI4QuadED2Ev:
       10:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEED2Ev:
      152:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorI7OperandED2Ev:
      524:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEED2Ev:
        3:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEED2Ev:
      102:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockED2Ev:
        5:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIiED2Ev:
        5:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
_ZN9__gnu_cxx13new_allocatorIcED2Ev:
    #####:   86:      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
------------------
        -:   87:
        -:   88:      pointer
        -:   89:      address(reference __x) const _GLIBCXX_NOEXCEPT
        -:   90:      { return std::__addressof(__x); }
        -:   91:
        -:   92:      const_pointer
        -:   93:      address(const_reference __x) const _GLIBCXX_NOEXCEPT
        -:   94:      { return std::__addressof(__x); }
        -:   95:
        -:   96:      // NB: __n is permitted to be 0.  The C++ standard says nothing
        -:   97:      // about what the return value is when __n == 0.
        -:   98:      pointer
     578*:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
     578*:  101:	if (__n > this->max_size())
    #####:  102:	  std::__throw_bad_alloc();
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
     578*:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8allocateEyPKv:
      355:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
      355:  101:	if (__n > this->max_size())
      355:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
      355:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      355:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEE8allocateEyPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8allocateEyPKv:
        9:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
        9:  101:	if (__n > this->max_size())
        9:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
        9:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
        9:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE8allocateEyPKv:
       14:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       14:  101:	if (__n > this->max_size())
       14:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       14:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       14:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockE8allocateEyPKv:
       19:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       19:  101:	if (__n > this->max_size())
       19:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       19:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       19:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableE8allocateEyPKv:
    #####:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
    #####:  101:	if (__n > this->max_size())
    %%%%%:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
    #####:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
    %%%%%:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE8allocateEyPKv:
       19:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       19:  101:	if (__n > this->max_size())
       19:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       19:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       19:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8allocateEyPKv:
       64:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       64:  101:	if (__n > this->max_size())
       64:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       64:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       64:  111-block  0
        -:  112:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE8allocateEyPKv:
       98:   99:      allocate(size_type __n, const void* = static_cast<const void*>(0))
        -:  100:      {
       98:  101:	if (__n > this->max_size())
       98:  101-block  0
    #####:  102:	  std::__throw_bad_alloc();
    %%%%%:  102-block  0
        -:  103:
        -:  104:#if __cpp_aligned_new
        -:  105:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  106:	  {
        -:  107:	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
        -:  108:	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
        -:  109:	  }
        -:  110:#endif
       98:  111:	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
       98:  111-block  0
        -:  112:      }
------------------
        -:  113:
        -:  114:      // __p is not permitted to be a null pointer.
        -:  115:      void
     756*:  116:      deallocate(pointer __p, size_type)
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
     756*:  125:	::operator delete(__p);
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE10deallocateEPS2_y:
      355:  116:      deallocate(pointer __p, size_type)
      355:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
      355:  125:	::operator delete(__p);
      355:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEE10deallocateEPSC_y:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE10deallocateEPSB_y:
        9:  116:      deallocate(pointer __p, size_type)
        9:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
        9:  125:	::operator delete(__p);
        9:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE10deallocateEPSB_y:
       14:  116:      deallocate(pointer __p, size_type)
       14:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       14:  125:	::operator delete(__p);
       14:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockE10deallocateEPS2_y:
       19:  116:      deallocate(pointer __p, size_type)
       19:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       19:  125:	::operator delete(__p);
       19:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableE10deallocateEPS1_y:
    #####:  116:      deallocate(pointer __p, size_type)
    %%%%%:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
    #####:  125:	::operator delete(__p);
    %%%%%:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorI4QuadE10deallocateEPS1_y:
       33:  116:      deallocate(pointer __p, size_type)
       33:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       33:  125:	::operator delete(__p);
       33:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIiE10deallocateEPiy:
       19:  116:      deallocate(pointer __p, size_type)
       19:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       19:  125:	::operator delete(__p);
       19:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE10deallocateEPS6_y:
       64:  116:      deallocate(pointer __p, size_type)
       64:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       64:  125:	::operator delete(__p);
       64:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorI7OperandE10deallocateEPS1_y:
      145:  116:      deallocate(pointer __p, size_type)
      145:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
      145:  125:	::operator delete(__p);
      145:  125-block  0
        -:  126:      }
------------------
_ZN9__gnu_cxx13new_allocatorIcE10deallocateEPcy:
       98:  116:      deallocate(pointer __p, size_type)
       98:  116-block  0
        -:  117:      {
        -:  118:#if __cpp_aligned_new
        -:  119:	if (alignof(_Tp) > __STDCPP_DEFAULT_NEW_ALIGNMENT__)
        -:  120:	  {
        -:  121:	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
        -:  122:	    return;
        -:  123:	  }
        -:  124:#endif
       98:  125:	::operator delete(__p);
       98:  125-block  0
        -:  126:      }
------------------
        -:  127:
        -:  128:      size_type
    1312*:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    1312*:  130:      { return size_t(-1) / sizeof(_Tp); }
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE8max_sizeEv:
      355:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
      355:  130:      { return size_t(-1) / sizeof(_Tp); }
      355:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE8max_sizeEv:
        9:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
        9:  130:      { return size_t(-1) / sizeof(_Tp); }
        9:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE8max_sizeEv:
       14:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       14:  130:      { return size_t(-1) / sizeof(_Tp); }
       14:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIP10BasicBlockE8max_sizeEv:
       57:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       57:  130:      { return size_t(-1) / sizeof(_Tp); }
       57:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorI16ValueNumberTableE8max_sizeEv:
    #####:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
    #####:  130:      { return size_t(-1) / sizeof(_Tp); }
    %%%%%:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIiE8max_sizeEv:
       57:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
       57:  130:      { return size_t(-1) / sizeof(_Tp); }
       57:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE8max_sizeEv:
      174:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
      174:  130:      { return size_t(-1) / sizeof(_Tp); }
      174:  130-block  0
------------------
_ZNK9__gnu_cxx13new_allocatorIcE8max_sizeEv:
      646:  129:      max_size() const _GLIBCXX_USE_NOEXCEPT
      646:  130:      { return size_t(-1) / sizeof(_Tp); }
      646:  130-block  0
------------------
        -:  131:
        -:  132:#if __cplusplus >= 201103L
        -:  133:      template<typename _Up, typename... _Args>
        -:  134:	void
     516*:  135:	construct(_Up* __p, _Args&&... __args)
     516*:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE9constructIiJRKiEEEvPT_DpOT0_:
      417:  135:	construct(_Up* __p, _Args&&... __args)
      417:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
      417:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEE9constructISB_JRKSt21piecewise_construct_tS3_IJRSA_EES3_IJEEEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
    $$$$$:  136-block  3
    $$$$$:  136-block  4
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
    %%%%%:  136-block  1
    $$$$$:  136-block  2
    $$$$$:  136-block  3
    $$$$$:  136-block  4
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE9constructISA_JRKSt21piecewise_construct_tSt5tupleIJRS9_EESH_IJEEEEEvPT_DpOT0_:
        5:  135:	construct(_Up* __p, _Args&&... __args)
        5:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
        5:  136-block  0
        5:  136-block  1
    $$$$$:  136-block  2
    $$$$$:  136-block  3
    $$$$$:  136-block  4
------------------
_ZN9__gnu_cxx13new_allocatorIiE9constructIiJiEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JS6_EEEvPT_DpOT0_:
       51:  135:	construct(_Up* __p, _Args&&... __args)
       51:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       51:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockE9constructIS2_JRKS2_EEEvPT_DpOT0_:
       27:  135:	construct(_Up* __p, _Args&&... __args)
       27:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       27:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableE9constructIS1_JEEEvPT_DpOT0_:
    #####:  135:	construct(_Up* __p, _Args&&... __args)
    #####:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
    %%%%%:  136-block  0
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE9constructIS6_JRKS6_EEEvPT_DpOT0_:
       16:  135:	construct(_Up* __p, _Args&&... __args)
       16:  136:	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
       16:  136-block  0
       16:  136-block  1
    $$$$$:  136-block  2
------------------
        -:  137:
        -:  138:      template<typename _Up>
        -:  139:	void
     440*:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeIiEE7destroyIiEEvPT_:
      417:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKSt5tupleIJN4Quad4TypeESt6vectorIiSaIiEEEEiEEE7destroyISB_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEE7destroyISA_EEvPT_:
        9:  140:	destroy(_Up* __p) { __p->~_Up(); }
        9:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEiEEE7destroyISA_EEvPT_:
       14:  140:	destroy(_Up* __p) { __p->~_Up(); }
       14:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEE7destroyIS6_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorI7OperandE7destroyIS1_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIP10BasicBlockE7destroyIS2_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
_ZN9__gnu_cxx13new_allocatorI16ValueNumberTableE7destroyIS1_EEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
    %%%%%:  140-block  0
------------------
_ZN9__gnu_cxx13new_allocatorIiE7destroyIiEEvPT_:
    #####:  140:	destroy(_Up* __p) { __p->~_Up(); }
------------------
        -:  141:#else
        -:  142:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  143:      // 402. wrong new expression in [some_] allocator::construct
        -:  144:      void
        -:  145:      construct(pointer __p, const _Tp& __val)
        -:  146:      { ::new((void *)__p) _Tp(__val); }
        -:  147:
        -:  148:      void
        -:  149:      destroy(pointer __p) { __p->~_Tp(); }
        -:  150:#endif
        -:  151:    };
        -:  152:
        -:  153:  template<typename _Tp>
        -:  154:    inline bool
        -:  155:    operator==(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  156:    { return true; }
        -:  157:
        -:  158:  template<typename _Tp>
        -:  159:    inline bool
        -:  160:    operator!=(const new_allocator<_Tp>&, const new_allocator<_Tp>&)
        -:  161:    { return false; }
        -:  162:
        -:  163:_GLIBCXX_END_NAMESPACE_VERSION
        -:  164:} // namespace
        -:  165:
        -:  166:#endif
