        -:    0:Source:D:/programming/c/tac_parser/tac_worker/LoopFinder.cpp
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\tac_worker\dataflow_graph.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <vector>
        -:    2:#include <iostream>
        -:    3:#include <algorithm>
        -:    4:#include <list>
        -:    5:#include <map>
        -:    6:
        -:    7:struct LoopFinder {
        -:    8:    std::vector<int> stack;
        -:    9:    std::map<int, std::list<int>> a;
        -:   10:    std::vector<std::list<int>> b;
        -:   11:    std::vector<bool> blocked;
        -:   12:    int n;
        -:   13:    int s;
        -:   14:
        -:   15:    std::vector<std::vector<int>> loops;
        -:   16:
        -:   17:    static void Start() {
        -:   18:        std::map<int, std::list<int>> a;
        -:   19:        a.emplace(0, std::list<int>{1}); // 0
        -:   20:        a.emplace(1, std::list<int>{2, 3});  // 1
        -:   21:        a.emplace(2, std::list<int>{1});  // 2
        -:   22:        a.emplace(3, std::list<int>{4}); // 3
        -:   23:        a.emplace(4, std::list<int>{}); // 4
        -:   24:
        -:   25:        LoopFinder cf = LoopFinder(a);
        -:   26:        cf.find();
        -:   27:
        -:   28:        std::cout << "Unique loops: " << std::endl;
        -:   29:        for (const auto &loop : cf.loops) {
        -:   30:            for (const auto &el : loop) {
        -:   31:                std::cout << el << " ";
        -:   32:            }
        -:   33:            std::cout << std::endl;
        -:   34:        }
        -:   35:
        -:   36:    }
        -:   37:
    #####:   38:    LoopFinder(const std::map<int, std::list<int>> &a) : a(a), n(a.size()) {
    %%%%%:   38-block  0
    %%%%%:   38-block  1
    $$$$$:   38-block  2
    $$$$$:   38-block  3
    $$$$$:   38-block  4
    $$$$$:   38-block  5
    $$$$$:   38-block  6
    #####:   39:        for (int i = 0; i < n; i++) {
    %%%%%:   39-block  0
    #####:   40:            b.emplace_back();
    %%%%%:   40-block  0
    #####:   41:            blocked.emplace_back(false);
    %%%%%:   41-block  0
    %%%%%:   41-block  1
    $$$$$:   41-block  2
        -:   42:        }
    #####:   43:    }
    %%%%%:   43-block  0
        -:   44:
    #####:   45:    void unblock(int u) {
    #####:   46:        blocked[u] = false;
    %%%%%:   46-block  0
    #####:   47:        while (!b[u].empty()) {
    %%%%%:   47-block  0
    %%%%%:   47-block  1
    #####:   48:            int w = b[u].front();
    %%%%%:   48-block  0
    #####:   49:            b[u].pop_front();
    #####:   50:            if (blocked[w]) unblock(w);
    %%%%%:   50-block  0
        -:   51:        }
    #####:   52:    }
        -:   53:
    #####:   54:    bool circuit(int v) {
    #####:   55:        bool f = false;
    #####:   56:        stack.push_back(v);
    %%%%%:   56-block  0
    #####:   57:        blocked[v] = true;
        -:   58:        // L1
    #####:   59:        for (int w : a[v]) {
    %%%%%:   59-block  0
    %%%%%:   59-block  1
    %%%%%:   59-block  2
    %%%%%:   59-block  3
    #####:   60:            if (w == s) {
    #####:   61:                add_loop();
    %%%%%:   61-block  0
    #####:   62:                f = true;
    %%%%%:   62-block  0
    #####:   63:            } else if (!blocked[w])
    %%%%%:   63-block  0
    #####:   64:                if (circuit(w)) f = true;
    %%%%%:   64-block  0
    %%%%%:   64-block  1
    %%%%%:   64-block  2
        -:   65:        }
        -:   66:
        -:   67:        // L2
    #####:   68:        if (f)
    %%%%%:   68-block  0
    #####:   69:            unblock(v);
    %%%%%:   69-block  0
        -:   70:        else {
    #####:   71:            for (int w : a[v])
    %%%%%:   71-block  0
    %%%%%:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    %%%%%:   71-block  4
    #####:   72:                if (std::find(b[w].begin(), b[w].end(), v) == b[w].end())
    %%%%%:   72-block  0
    $$$$$:   72-block  1
    #####:   73:                    b[w].push_back(v);
    %%%%%:   73-block  0
        -:   74:        }
    #####:   75:        stack.pop_back();
    %%%%%:   75-block  0
    #####:   76:        return f;
    %%%%%:   76-block  0
        -:   77:    }
        -:   78:
    #####:   79:    void add_loop() {
    #####:   80:        std::vector<int> loop;
    %%%%%:   80-block  0
    %%%%%:   80-block  1
    $$$$$:   80-block  2
    #####:   81:        for (int i : stack) {
    %%%%%:   81-block  0
    %%%%%:   81-block  1
    %%%%%:   81-block  2
        -:   82://            std::cout << i << " ";
    #####:   83:            loop.push_back(i);
        -:   84:        }
    #####:   85:        loops.emplace_back(loop);
    %%%%%:   85-block  0
        -:   86://        std::cout << s << std::endl;
    #####:   87:    }
        -:   88:
    #####:   89:    void find() {
    #####:   90:        s = 0;
    %%%%%:   90-block  0
    #####:   91:        while (s < n) {
    %%%%%:   91-block  0
    %%%%%:   91-block  1
    #####:   92:            if (!a.empty()) {
    %%%%%:   92-block  0
    #####:   93:                for (auto &[i, l] : a) {
    %%%%%:   93-block  0
    %%%%%:   93-block  1
    %%%%%:   93-block  2
    #####:   94:                    b[i].clear();
    #####:   95:                    blocked[i] = false;
        -:   96:                }
        -:   97:                // L3
    #####:   98:                circuit(s);
    %%%%%:   98-block  0
    #####:   99:                a.erase(s);
    #####:  100:                for (auto &[i, l] : a)
    %%%%%:  100-block  0
    %%%%%:  100-block  1
    %%%%%:  100-block  2
    #####:  101:                    if (auto it = std::find(a[i].begin(), a[i].end(), s); it != a[i].end())
    %%%%%:  101-block  0
    %%%%%:  101-block  1
    %%%%%:  101-block  2
    %%%%%:  101-block  3
    #####:  102:                        a[i].erase(it);
    %%%%%:  102-block  0
    %%%%%:  102-block  1
    #####:  103:                s++;
    %%%%%:  103-block  0
        -:  104:            } else
    #####:  105:                s = n;
    %%%%%:  105-block  0
        -:  106:        }
    #####:  107:    }
    %%%%%:  107-block  0
        -:  108:};
