// Common Subexpression Elimination
//B1:
//    if 0 goto B2
//B1:
//    a = b + c
//    goto B3
//B2:
//    //b = 7
//    d = b + c
//    goto B3
//B3:
//    e = b + c


// Loop-invariant code motion
//B0:
//    goto B1
//B1:
//    a = b + c
//    if 0 goto B1
//B2:
//    return 0

// partial-redundancy elimination
//B1:
//    if 0 goto B3
//B2:
//    a = b + c
//    goto B4
//B3:
//    goto B4
//B4:
//    d = b + c

// one-block lcm
B1:
    if 0 goto B5
B2:
    c = 2
    goto B3
B3:
    goto B4
B4:
    goto B7
B5:
    a = b + c
    goto B6
B6:
    goto B7
B7:
    d = b + c
B8:
    if 0 goto B11
B9:
    e = b + c
B10:
    if 0 goto B9
B11:
    return 0


//B1:
//    a = 1
//    b = 2
//B2:
//    c = a + b
//    d = c - a
//B3:
//    d = b + d
//    if 0 goto B5
//B4:
//    d = a + b
//    e = e + 1
//    goto B3
//B5:
//    b = a + b
//    e = c - a
//    if 0 goto B2
//B6:
//    a = b * d
//    b = a - d