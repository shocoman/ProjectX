        -:    0:Source:D:/programming/c/tac_parser/grammar/lexer.l
        -:    0:Graph:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\lexer.cpp.gcno
        -:    0:Data:D:\programming\c\tac_parser\cmake-build-debug-coverage\CMakeFiles\tac_parser.dir\lexer.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:%{
        -:    2:    //#pragma warning (disable : 4005)
        -:    3:    #include <climits>
        -:    4:    #include <cstring>
        -:    5:    #include <string>
        -:    6:    #include <functional>
        -:    7:    #include <map>
        -:    8:    #include "../driver/driver.hpp"
        -:    9:%}
        -:   10:
        -:   11:%option noyywrap nounput noinput batch debug
        -:   12:
        -:   13:%{
        -:   14:    yy::parser::symbol_type make_NUMBER(const std::string& s, const yy::parser::location_type& loc, bool);
        -:   15:    yy::parser::symbol_type make_IDENTIFIER(const std::string& s, const yy::parser::location_type& loc);
        -:   16:    #define YY_USER_ACTION loc.columns(yyleng);
        -:   17:%}
        -:   18:
        -:   19:
        -:   20:id  [a-zA-Z$_][a-zA-Z_0-9]*
        -:   21:int [0-9]+
        -:   22:float {int}\.{int}?
        -:   23:blank [ \t\r]
        -:   24:line_comment "//".*\n
        -:   25:only_newline ^{blank}*\n$
        -:   26:
        -:   27:%%
        -:   28:
        -:   29:%{
        -:   30:    yy::location& loc = drv.location;
      147:   31:    loc.step();
      147:   32:%}
      147:   32-block  0
        -:   33:
        -:   34:{only_newline}*             loc.lines(yyleng); loc.step();
        6:   35:\n                          loc.lines(yyleng); loc.step(); return yy::parser::make_NEWLINE(loc);
       42:   36:{blank}+                    loc.step();
       92:   37:{line_comment}              loc.step();
      172:   38:
      208:   39:"="     return yy::parser::make_ASSIGN(loc);
       36:   39-block  0
       36:   39-block  1
       36:   39-block  2
       92:   39-block  3
       92:   39-block  4
       92:   39-block  5
       21:   40:"+"     return yy::parser::make_PLUS(loc);
      104:   41:"-"     return yy::parser::make_MINUS(loc);
       80:   41-block  0
       80:   41-block  1
       80:   41-block  2
       21:   41-block  3
       21:   41-block  4
       21:   41-block  5
    #####:   42:"*"     return yy::parser::make_MULT(loc);
       3*:   43:"/"     return yy::parser::make_DIV(loc);
        3:   43-block  0
        3:   43-block  1
        3:   43-block  2
    #####:   44:"&"     return yy::parser::make_REF(loc);
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    #####:   45:
    %%%%%:   45-block  0
    %%%%%:   45-block  1
    %%%%%:   45-block  2
    #####:   46:"<"     return yy::parser::make_CMP_LT(loc);
    %%%%%:   46-block  0
    %%%%%:   46-block  1
    %%%%%:   46-block  2
       3*:   47:">"     return yy::parser::make_CMP_GT(loc);
    %%%%%:   47-block  0
    %%%%%:   47-block  1
    %%%%%:   47-block  2
       3*:   48:"=="    return yy::parser::make_CMP_EQ(loc);
        3:   48-block  0
        3:   48-block  1
        3:   48-block  2
    #####:   49:"!="    return yy::parser::make_CMP_NEQ(loc);
    #####:   50:
    %%%%%:   50-block  0
    %%%%%:   50-block  1
    %%%%%:   50-block  2
    #####:   51:
    %%%%%:   51-block  0
    %%%%%:   51-block  1
    %%%%%:   51-block  2
    #####:   52:";"     return yy::parser::make_SEMI(loc);
    %%%%%:   52-block  0
    %%%%%:   52-block  1
    %%%%%:   52-block  2
    #####:   53:":"     return yy::parser::make_COLON(loc);
    %%%%%:   53-block  0
    %%%%%:   53-block  1
    %%%%%:   53-block  2
        9:   54:"("     return yy::parser::make_LPAREN(loc);
    #####:   55:")"     return yy::parser::make_RPAREN(loc);
       9*:   56:"["     return yy::parser::make_LBRACKET(loc);
        9:   56-block  0
        9:   56-block  1
        9:   56-block  2
    #####:   57:"]"     return yy::parser::make_RBRACKET(loc);
    %%%%%:   57-block  0
    %%%%%:   57-block  1
    %%%%%:   57-block  2
    #####:   58:
    %%%%%:   58-block  0
    %%%%%:   58-block  1
    %%%%%:   58-block  2
    #####:   59:{float} return make_NUMBER(yytext, loc, false);
    %%%%%:   59-block  0
    %%%%%:   59-block  1
    %%%%%:   59-block  2
    #####:   60:{int}   return make_NUMBER(yytext, loc, true);
    %%%%%:   60-block  0
    %%%%%:   60-block  1
    %%%%%:   60-block  2
    %%%%%:   60-block  3
    %%%%%:   60-block  4
    $$$$$:   60-block  5
    $$$$$:   60-block  6
    $$$$$:   60-block  7
    $$$$$:   60-block  8
      17*:   61:{id}    return make_IDENTIFIER(yytext, loc);
    %%%%%:   61-block  0
    %%%%%:   61-block  1
    %%%%%:   61-block  2
       17:   61-block  3
       17:   61-block  4
    $$$$$:   61-block  5
    $$$$$:   61-block  6
    $$$$$:   61-block  7
    $$$$$:   61-block  8
       57:   62:
       57:   62-block  0
       57:   62-block  1
    $$$$$:   62-block  2
    $$$$$:   62-block  3
    $$$$$:   62-block  4
    $$$$$:   62-block  5
       17:   63:.       {
       17:   63-block  0
       17:   63-block  1
       17:   63-block  2
      57*:   64:            throw yy::parser::syntax_error(loc, "invalid character: " + std::string(yytext));
       57:   64-block  0
       57:   64-block  1
       57:   64-block  2
    #####:   65:        }
    %%%%%:   65-block  0
    %%%%%:   65-block  1
    %%%%%:   65-block  2
    %%%%%:   65-block  3
    %%%%%:   65-block  4
    %%%%%:   65-block  5
    $$$$$:   65-block  6
    $$$$$:   65-block  7
    $$$$$:   65-block  8
    $$$$$:   65-block  9
    $$$$$:   65-block 10
    $$$$$:   65-block 11
    $$$$$:   65-block 12
        -:   66:
        -:   67:
        1:   68:<<EOF>> return yy::parser::make_YYEOF(loc);
        1:   69:%%
        1:   69-block  0
    #####:   70:
    #####:   71:yy::parser::symbol_type make_NUMBER(const std::string& s, const yy::parser::location_type& loc, bool is_int) {
    %%%%%:   71-block  0
    #####:   72:    errno = 0;
    %%%%%:   72-block  0
    %%%%%:   72-block  1
    %%%%%:   72-block  2
       17:   73:    if (is_int) {
       17:   73-block  0
       17:   74:        long n = strtol(s.c_str(), NULL, 10);
       17:   75:        if (! (INT_MIN <= n && n <= INT_MAX && errno != ERANGE))
       17:   75-block  0
       17:   76:            throw yy::parser::syntax_error(loc, "integer is out of range: " + s);
    #####:   77:        return yy::parser::make_INT((int)n, loc);
    %%%%%:   77-block  0
    %%%%%:   77-block  1
    %%%%%:   77-block  2
    $$$$$:   77-block  3
    $$$$$:   77-block  4
    $$$$$:   77-block  5
       17:   78:    } else {
       17:   78-block  0
        -:   79:        double n = strtod(s.c_str(), NULL);
    #####:   80:        return yy::parser::make_FLOAT(n, loc);
    %%%%%:   80-block  0
    #####:   81:    }
        -:   82:}
        -:   83:
        -:   84:yy::parser::symbol_type make_IDENTIFIER(const std::string& s, const yy::parser::location_type& loc) {
       57:   85:    std::map<std::string, std::function<yy::parser::symbol_type(const yy::parser::location_type&)>> keywords = {
        -:   86:            {"if", yy::parser::make_IFTRUE },
        -:   87:            {"ifTrue", yy::parser::make_IFTRUE },
        -:   88:            {"ifFalse", yy::parser::make_IFFALSE },
        -:   89:            {"goto", yy::parser::make_GOTO },
        -:   90:            {"halt", yy::parser::make_HALT },
        -:   91:            {"param", yy::parser::make_PARAM },
        -:   92:            {"call", yy::parser::make_CALL },
        -:   93:            {"nop", yy::parser::make_NOP },
        -:   94:            {"return", yy::parser::make_RETURN },
        -:   95:    };
      684:   96:
       57:   96-block  0
       57:   96-block  1
       57:   96-block  2
       57:   96-block  3
       57:   96-block  4
       57:   96-block  5
       57:   96-block  6
       57:   96-block  7
       57:   96-block  8
       57:   96-block  9
      513:   96-block 10
       57:   96-block 11
    $$$$$:   96-block 12
    $$$$$:   96-block 13
    $$$$$:   96-block 14
    $$$$$:   96-block 15
    $$$$$:   96-block 16
        -:   97:    if (auto f = keywords.find(s); f != keywords.end()) return f->second(loc);
       57:   98:    else return yy::parser::make_IDENTIFIER(s, loc);
       57:   98-block  0
       57:   98-block  1
        9:   98-block  2
        9:   98-block  3
       48:   99:}
       48:   99-block  0
       48:   99-block  1
       48:   99-block  2
    $$$$$:   99-block  3
    $$$$$:   99-block  4
        -:  100:
        -:  101:void driver::scan_begin()
        1:  102:{
        -:  103:    yy_flex_debug = trace_scanning;
        1:  104:    // yy_flex_debug = 1;
        -:  105:    if (file.empty() || file == "-")
       1*:  106:        yyin = stdin;
        1:  106-block  0
        1:  106-block  1
    %%%%%:  106-block  2
        1:  106-block  3
        1:  106-block  4
    #####:  107:    else if (!(yyin = fopen(file.c_str(), "r")))
    %%%%%:  107-block  0
        1:  108:    {
        1:  108-block  0
        -:  109:        std::cerr << "cannot open " << file << ": " << strerror(errno) << std::endl;
    #####:  110:        exit(EXIT_FAILURE);
    %%%%%:  110-block  0
    #####:  111:    }
        -:  112:}
        1:  113:
        -:  114:void driver::scan_end() {
        1:  115:    fclose(yyin);
        1:  116:}
        1:  116-block  0
